/*
 * PlotPanel.java
 *
 * Created on May 7, 2004, 11:43 AM
 */
import java.awt.*;
import java.awt.event.*;
import java.awt.image.*;
import java.io.*;
import javax.swing.*;

/**
 *
 * @author  Kevin Ziemer
 */
public class PlotPanel extends JPanel implements MouseListener, MouseMotionListener{
    
    private IntPoint locationsToPlot[];
    private RatTrack myRatTrack;
    private boolean trackModifiable;
    private int pointSize = 2;
    private int animatedPointSize = 6;
    private Color animatedPointColor = new Color(0,255,0);
    private int animatedPointNumber = 0;
    private boolean animate = true;
    private int numberOfPointsDefined;
    private IntPoint secondPoint;
    private IntPoint firstPoint;
    //private Color startColor = new Color(0,255,0); // green
    private Color startColor = new Color(0,0,255); 
    private Color endColor = new Color(255,0,0); // red
    private Graphics2D ratPositionsImage;
    private Graphics2D osd;
    private BufferedImage positionBuffer;
    private BufferedImage screenBuffer;
    private int maxX = 0;
    private int maxY = 0;
    private boolean cwDir = false;
    private boolean dirSet = false;
    
    
    private int animationInc = 1;
    
    /** Creates new form PlotPanel */
    public PlotPanel() {
        initComponents();
        kzinit();
    }
    public PlotPanel(IntPoint inputData[])
    {
        initComponents();
        locationsToPlot = inputData;
        
        for(int i = 0; i < locationsToPlot.length; i++)
        {
            if(inputData[i].getX() > maxX)
                maxX = locationsToPlot[i].getX();
            if(inputData[i].getY() > maxY)
                maxY = locationsToPlot[i].getY();
        }
        kzinit();
        
    }
    private void kzinit()
    {
       firstPoint = new IntPoint();
       secondPoint = new IntPoint();
       numberOfPointsDefined = 0;
      
       trackModifiable = true;
       myRatTrack = new RatTrack();
       addMouseListener(this);
       addMouseMotionListener(this);
       positionBuffer = new BufferedImage(maxX+10,maxY+10,BufferedImage.TYPE_INT_RGB);
       ratPositionsImage = positionBuffer.createGraphics();     // create buffers to speed up drawing process
       screenBuffer = new BufferedImage(maxX+10,maxY+10,BufferedImage.TYPE_INT_RGB);
       osd = screenBuffer.createGraphics();
       drawRatPositions();
       
        
    }
    public void startAnimation()
    {
        animate = true;
    }
    
    public void setAnimationNumber(int theNumber)
    {
        animatedPointNumber = theNumber;
        
        repaint();
    }
    public IntPoint[] getTrackCoords()
    {
        return myRatTrack.getMiddleCoords();
    }
    public IntPoint[] getOuterCoords()
    {
        return myRatTrack.getOuterCoords();
    }
    public IntPoint[] getInnerCoords()
    {
        return myRatTrack.getInnerCoords();
    }
    private void drawRatPositions()
    {
        ratPositionsImage.setColor(new Color(255,255,255));
        ratPositionsImage.fillRect(0,0,positionBuffer.getWidth(),positionBuffer.getHeight());
        
        Color dotColor = startColor;
			
	int dotRed = dotColor.getRed();
	int dotBlue = dotColor.getBlue();
	int dotGreen = dotColor.getGreen();
		
	int greenDiff = endColor.getGreen() - dotGreen;
	int redDiff = endColor.getRed() - dotRed;
	int blueDiff = endColor.getBlue() - dotBlue;
                
        
        for(int i=0; i < locationsToPlot.length; i++)
        {
            int newRed = (int) Math.round((double)redDiff*((double)i/locationsToPlot.length)) + dotRed;
            int newGreen = (int) Math.round((double)greenDiff*((double)i/locationsToPlot.length)) + dotGreen;
            int newBlue = (int) Math.round((double)blueDiff*((double)i/locationsToPlot.length)) + dotBlue;
            
            dotColor = new Color(newRed,newGreen,newBlue);
            ratPositionsImage.setColor(dotColor);
            ratPositionsImage.fillOval((int)locationsToPlot[i].getX()-pointSize,(int)locationsToPlot[i].getY()-pointSize,2*pointSize,2*pointSize);
        }
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents

        setLayout(new java.awt.BorderLayout());

    }//GEN-END:initComponents
    
    public void paintComponent(Graphics g)
    {
        super.paintComponent(g);
        
        osd.drawImage(positionBuffer,0,0,this);
        myRatTrack.drawTrack(osd);
        if(animate)
        {
            Color stackColor = osd.getColor();
            osd.setColor(animatedPointColor);
            osd.fillOval((int)locationsToPlot[animatedPointNumber].getX()-animatedPointSize,(int)locationsToPlot[animatedPointNumber].getY()-animatedPointSize,2*animatedPointSize,2*animatedPointSize);
            osd.setColor(stackColor);
        }
        
        g.drawImage(screenBuffer,0,0,this);
        
        
    }
    
    public void mouseClicked(MouseEvent e) {
        //System.out.print("\nMouse Clicked:\n");
        //IntPoint newPoint = new IntPoint(e.getX(),e.getY());
        if(numberOfPointsDefined > 1)
        {
            numberOfPointsDefined = 0;
        }
        if(numberOfPointsDefined == 0)
        {
            //System.out.print("X: " + e.getX() + " | Y: " + e.getY() + "\n");
            firstPoint.setX(e.getX());
            firstPoint.setY(e.getY());
            myRatTrack.setFirstPoint(firstPoint);
        }
        else
        {
            secondPoint.setX(e.getX());
            secondPoint.setY(e.getY());
            myRatTrack.setSecondPoint(secondPoint);
        }
        numberOfPointsDefined += 1; 
        
        repaint();
    }
    
    public void mouseEntered(MouseEvent e) {
        
    }
    
    public void mouseExited(MouseEvent e) {
        //System.out.print("\nMouse Exited:\n");
        if(numberOfPointsDefined == 1)
        {
           numberOfPointsDefined = 0;
           myRatTrack.reset();
           
           repaint();
        }
        
        
    }
    
    public void mousePressed(MouseEvent e) {
        
    }
    
    public void mouseReleased(MouseEvent e) {
        
    }
    
    
    public void mouseDragged(MouseEvent e) {
        
    }
    
    public void mouseMoved(MouseEvent e) 
    {
        //System.out.print("\nMouse Moved:\n");
        if(numberOfPointsDefined == 1)
        {
            secondPoint.setX(e.getX());
            secondPoint.setY(e.getY());
            
            myRatTrack.setSecondPoint(secondPoint);
            repaint();
        }
    }
    
    public int nextAnimationPoint() 
    {
        animatedPointNumber += animationInc;
        if(animatedPointNumber >= locationsToPlot.length)
            animatedPointNumber = 0;
        //drawRatPositions();
        repaint();
        return animatedPointNumber;
    }
    public int getNumberOfPoints()
    {
        return locationsToPlot.length;
    }
    public void setClockwiseDirection()
    {
        cwDir = true;
        dirSet = true;
    }
    public void setCtrClockwiseDirection()
    {
        cwDir = false;
        dirSet = true;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    
}
